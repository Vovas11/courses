/*
 * This file is generated by jOOQ.
 */
package com.devproserv.courses.jooq.tables;


import com.devproserv.courses.jooq.Coursedb;
import com.devproserv.courses.jooq.Indexes;
import com.devproserv.courses.jooq.Keys;
import com.devproserv.courses.jooq.tables.records.ArchiveRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Archive extends TableImpl<ArchiveRecord> {

    private static final long serialVersionUID = -1138560989;

    /**
     * The reference instance of <code>coursedb.archive</code>
     */
    public static final Archive ARCHIVE = new Archive();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArchiveRecord> getRecordType() {
        return ArchiveRecord.class;
    }

    /**
     * The column <code>coursedb.archive.course_id</code>.
     */
    public final TableField<ArchiveRecord, Integer> COURSE_ID = createField("course_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>coursedb.archive.stud_id</code>.
     */
    public final TableField<ArchiveRecord, Integer> STUD_ID = createField("stud_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>coursedb.archive.mark</code>.
     */
    public final TableField<ArchiveRecord, String> MARK = createField("mark", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * Create a <code>coursedb.archive</code> table reference
     */
    public Archive() {
        this(DSL.name("archive"), null);
    }

    /**
     * Create an aliased <code>coursedb.archive</code> table reference
     */
    public Archive(String alias) {
        this(DSL.name(alias), ARCHIVE);
    }

    /**
     * Create an aliased <code>coursedb.archive</code> table reference
     */
    public Archive(Name alias) {
        this(alias, ARCHIVE);
    }

    private Archive(Name alias, Table<ArchiveRecord> aliased) {
        this(alias, aliased, null);
    }

    private Archive(Name alias, Table<ArchiveRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Archive(Table<O> child, ForeignKey<O, ArchiveRecord> key) {
        super(child, key, ARCHIVE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Coursedb.COURSEDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ARCHIVE_FK_ARCHIVE_STUDENT_COURSES1_IDX, Indexes.ARCHIVE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ArchiveRecord> getPrimaryKey() {
        return Keys.KEY_ARCHIVE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ArchiveRecord>> getKeys() {
        return Arrays.<UniqueKey<ArchiveRecord>>asList(Keys.KEY_ARCHIVE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ArchiveRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ArchiveRecord, ?>>asList(Keys.FK_ARCHIVE_STUDENT_COURSES1);
    }

    public StudentCourses studentCourses() {
        return new StudentCourses(this, Keys.FK_ARCHIVE_STUDENT_COURSES1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Archive as(String alias) {
        return new Archive(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Archive as(Name alias) {
        return new Archive(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Archive rename(String name) {
        return new Archive(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Archive rename(Name name) {
        return new Archive(name, null);
    }
}
