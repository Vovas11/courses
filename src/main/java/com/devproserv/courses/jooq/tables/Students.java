/*
 * This file is generated by jOOQ.
 */
package com.devproserv.courses.jooq.tables;


import com.devproserv.courses.jooq.Coursedb;
import com.devproserv.courses.jooq.Indexes;
import com.devproserv.courses.jooq.Keys;
import com.devproserv.courses.jooq.tables.records.StudentsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Students extends TableImpl<StudentsRecord> {

    private static final long serialVersionUID = 319731756;

    /**
     * The reference instance of <code>coursedb.students</code>
     */
    public static final Students STUDENTS = new Students();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentsRecord> getRecordType() {
        return StudentsRecord.class;
    }

    /**
     * The column <code>coursedb.students.stud_id</code>.
     */
    public final TableField<StudentsRecord, Integer> STUD_ID = createField("stud_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>coursedb.students.faculty</code>.
     */
    public final TableField<StudentsRecord, String> FACULTY = createField("faculty", org.jooq.impl.SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * Create a <code>coursedb.students</code> table reference
     */
    public Students() {
        this(DSL.name("students"), null);
    }

    /**
     * Create an aliased <code>coursedb.students</code> table reference
     */
    public Students(String alias) {
        this(DSL.name(alias), STUDENTS);
    }

    /**
     * Create an aliased <code>coursedb.students</code> table reference
     */
    public Students(Name alias) {
        this(alias, STUDENTS);
    }

    private Students(Name alias, Table<StudentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Students(Name alias, Table<StudentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Students(Table<O> child, ForeignKey<O, StudentsRecord> key) {
        super(child, key, STUDENTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Coursedb.COURSEDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STUDENTS_FK_STUDENTS_USERS1_IDX, Indexes.STUDENTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StudentsRecord> getPrimaryKey() {
        return Keys.KEY_STUDENTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StudentsRecord>> getKeys() {
        return Arrays.<UniqueKey<StudentsRecord>>asList(Keys.KEY_STUDENTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StudentsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StudentsRecord, ?>>asList(Keys.FK_STUDENTS_USERS1);
    }

    public Users users() {
        return new Users(this, Keys.FK_STUDENTS_USERS1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Students as(String alias) {
        return new Students(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Students as(Name alias) {
        return new Students(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Students rename(String name) {
        return new Students(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Students rename(Name name) {
        return new Students(name, null);
    }
}
