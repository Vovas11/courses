package com.devproserv.courses.dao;

import com.devproserv.courses.model.Student;
import com.devproserv.courses.model.User;
import com.devproserv.courses.model.User.Role;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

import static com.devproserv.courses.config.MainConfig.INSERT_STUDENT_SQL;
import static com.devproserv.courses.config.MainConfig.INSERT_USER_SQL;
import static com.devproserv.courses.config.MainConfig.SELECT_LOGIN_SQL;

/**
 * Provides CRUD methods for communication between application and database.
 * Implements operations with user tables (users and students).
 * 
 * @author vovas11
 */
public class UserDao {

    private static final Logger logger = Logger.getLogger(UserDao.class.getName());

    private DataSource dataSource;


    public UserDao(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    // Signing up methods

    /**
     * Checks if the specified login exists in the database. The method is used during sign up procedure.
     * 
     * @param login login (user name)
     * @return {@code true} if the user exists and {@code false} if does not
     */
    public boolean loginExists(String login) {
        try (Connection connection = dataSource.getConnection();
             PreparedStatement prepStmt = connection.prepareStatement(SELECT_LOGIN_SQL)
        ) {
            prepStmt.setString(1, login);
            ResultSet result = prepStmt.executeQuery();
            /* returns true if result is not empty */
            return result.next();
        } catch (SQLException e) {
            logger.log(Level.SEVERE, "Request to database failed", e);
        }
        return true; // less changes in the database if something is wrong
    }

    /**
     * Creates new instance of {@link Student} with given parameters,
     * checks if the user with specified login exists in the database, and if no
     * inserts the user into the database (tables 'users' and 'students')
     * 
     * @param login argument representing login
     * @param password argument representing password
     * @param firstName argument representing first name
     * @param lastName argument representing last name
     * @param faculty argument representing faculty
     * 
     * @return {@code true} if the user has been created successfully and {@code false} if is not
     */
    public boolean createUser(String login, String password, String firstName, String lastName, String faculty) {
        Student student = new Student();
        student.setLogin(login);
        student.setPassword(password);
        student.setFirstName(firstName);
        student.setLastName(lastName);
        student.setRole(Role.STUD);
        student.setFaculty(faculty);
        
        return insertUser(student);
    }

    /**
     * Executes request into the database (tables 'users' and 'students') to insert the current user.
     * 
     * @param user the current user
     * @return {@code true} if the user has been created successfully and {@code false} if is not
     */
    private boolean insertUser(User user) {
        Student student;
        if (user instanceof Student) {
            student = (Student) user;
            try (Connection connection = dataSource.getConnection();
                 PreparedStatement prepStmtOne = connection.prepareStatement(INSERT_USER_SQL, Statement.RETURN_GENERATED_KEYS);
                 PreparedStatement prepStmtTwo = connection.prepareStatement(INSERT_STUDENT_SQL)
            ) {
                /* inserts data into the table 'users' */
                prepStmtOne.setString(1, student.getFirstName());
                prepStmtOne.setString(2, student.getLastName());
                prepStmtOne.setString(3, student.getLogin());
                prepStmtOne.setString(4, student.getPassword());
                prepStmtOne.setString(5, student.getRole().toString());
                /* returns false if inserting fails */
                if (prepStmtOne.executeUpdate() == 0) return false;
                /* returns autogenerated ID and assigns it to the user instance */
                ResultSet generatedKey = prepStmtOne.getGeneratedKeys();
                if (generatedKey.next()) {
                    student.setId(generatedKey.getInt(1));
                }
                /* inserts data into the table 'students' */
                prepStmtTwo.setInt(1, student.getId());
                prepStmtTwo.setString(2, student.getFaculty());
                return prepStmtTwo.executeUpdate() != 0;
            } catch (SQLException e) {
                logger.log(Level.SEVERE, "Request to database failed", e);
            }
        }
        return false;
    }
}